import { useState, useEffect } from 'react'
import Head from 'next/head'
import Link from 'next/link'
import { 
  ArrowLeft, 
  Calendar, 
  Clock, 
  MapPin, 
  Users, 
  CheckCircle, 
  XCircle, 
  AlertCircle,
  FileText,
  MessageSquare,
  Eye
} from 'lucide-react'

export default function AdminDashboard() {
  const [requests, setRequests] = useState([])
  const [selectedRequest, setSelectedRequest] = useState(null)
  const [loading, setLoading] = useState(true)
  const [filter, setFilter] = useState('all')

  // Mock data - replace with actual Supabase queries
  useEffect(() => {
    const mockRequests = [
      {
        id: 1,
        teacherName: 'Sarah Johnson',
        teacherEmail: 'sjohnson@cms.k12.nc.us',
        destination: 'Museum of Natural Science, Raleigh',
        purpose: 'Life Science curriculum enhancement',
        departureDate: '2024-10-15',
        departureTime: '09:00',
        returnDate: '2024-10-15',
        returnTime: '15:00',
        studentCount: 28,
        gradeLevel: '7th',
        chaperoneCount: 4,
        status: 'pending',
        submittedAt: '2024-09-10T10:30:00Z',
        currentStage: 'front-office',
        estimatedCost: '12.00',
        lunchArrangements: 'sack-lunch',
        approvals: {
          'front-office': { status: 'pending', approver: null, notes: '', timestamp: null },
          'principal': { status: 'pending', approver: null, notes: '', timestamp: null },
          'facilitator': { status: 'pending', approver: null, notes: '', timestamp: null },
          'treasurer': { status: 'pending', approver: null, notes: '', timestamp: null },
          'nurse': { status: 'pending', approver: null, notes: '', timestamp: null },
          'cafeteria': { status: 'pending', approver: null, notes: '', timestamp: null },
        }
      },
      {
        id: 2,
        teacherName: 'Michael Chen',
        teacherEmail: 'mchen@cms.k12.nc.us',
        destination: 'Charlotte Symphony Orchestra',
        purpose: 'Music appreciation and performance study',
        departureDate: '2024-10-22',
        departureTime: '08:30',
        returnDate: '2024-10-22',
        returnTime: '16:30',
        studentCount: 35,
        gradeLevel: '8th',
        chaperoneCount: 5,
        status: 'in-progress',
        submittedAt: '2024-09-08T14:15:00Z',
        currentStage: 'principal',
        estimatedCost: '25.00',
        lunchArrangements: 'restaurant',
        approvals: {
          'front-office': { status: 'approved', approver: 'Lisa Thompson', notes: 'Date available, no conflicts', timestamp: '2024-09-09T09:00:00Z' },
          'principal': { status: 'pending', approver: null, notes: '', timestamp: null },
          'facilitator': { status: 'pending', approver: null, notes: '', timestamp: null },
          'treasurer': { status: 'pending', approver: null, notes: '', timestamp: null },
          'nurse': { status: 'pending', approver: null, notes: '', timestamp: null },
          'cafeteria': { status: 'pending', approver: null, notes: '', timestamp: null },
        }
      },
      {
        id: 3,
        teacherName: 'Amanda Rodriguez',
        teacherEmail: 'arodriguez@cms.k12.nc.us',
        destination: 'Local Community Garden',
        purpose: 'Environmental science and sustainability education',
        departureDate: '2024-10-18',
        departureTime: '10:00',
        returnDate: '2024-10-18',
        returnTime: '14:00',
        studentCount: 22,
        gradeLevel: '6th',
        chaperoneCount: 3,
        status: 'approved',
        submittedAt: '2024-09-05T11:45:00Z',
        currentStage: 'completed',
        estimatedCost: '0.00',
        lunchArrangements: 'bring-own',
        approvals: {
          'front-office': { status: 'approved', approver: 'Lisa Thompson', notes: 'Perfect timing', timestamp: '2024-09-06T08:30:00Z' },
          'principal': { status: 'approved', approver: 'Principal Hager', notes: 'Excellent educational value', timestamp: '2024-09-06T10:15:00Z' },
          'facilitator': { status: 'approved', approver: 'Tom Wilson', notes: 'Transportation arranged', timestamp: '2024-09-06T13:20:00Z' },
          'treasurer': { status: 'approved', approver: 'Jane Smith', notes: 'No cost - approved', timestamp: '2024-09-06T14:00:00Z' },
          'nurse': { status: 'approved', approver: 'Nurse Kelly', notes: 'All health forms current', timestamp: '2024-09-06T14:30:00Z' },
          'cafeteria': { status: 'approved', approver: 'Mary Davis', notes: 'Students bringing own lunch', timestamp: '2024-09-06T15:00:00Z' },
        }
      }
    ]
    
    setTimeout(() => {
      setRequests(mockRequests)
      setLoading(false)
    }, 1000)
  }, [])

  const filteredRequests = requests.filter(request => {
    if (filter === 'all') return true
    return request.status === filter
  })

  const handleApproval = async (requestId, stage, action, notes = '') => {
    try {
      // Update request status
      setRequests(prev => prev.map(request => {
        if (request.id === requestId) {
          const updatedApprovals = {
            ...request.approvals,
            [stage]: {
              status: action,
              approver: 'Current User', // Replace with actual user
              notes: notes,
              timestamp: new Date().toISOString()
            }
          }
          
          // Determine next stage and overall status
          let newStatus = request.status
          let newCurrentStage = request.currentStage
          
          if (action === 'approved') {
            // Move to next stage
            const stages = ['front-office', 'principal', 'facilitator', 'treasurer', 'nurse', 'cafeteria']
            const currentIndex = stages.indexOf(stage)
            if (currentIndex < stages.length - 1) {
              newCurrentStage = stages[currentIndex + 1]
              newStatus = 'in-progress'
            } else {
              newStatus = 'approved'
              newCurrentStage = 'completed'
            }
          } else if (action === 'denied') {
            newStatus = 'denied'
            newCurrentStage = 'denied'
          }
          
          return {
            ...request,
            approvals: updatedApprovals,
            status: newStatus,
            currentStage: newCurrentStage
          }
        }
        return request
      }))
      
      console.log(`${action} request ${requestId} at stage ${stage}`)
    } catch (error) {
      console.error('Error updating approval:', error)
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800'
      case 'in-progress': return 'bg-blue-100 text-blue-800'
      case 'approved': return 'bg-green-100 text-green-800'
      case 'denied': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  const formatTime = (timeString) => {
    const [hours, minutes] = timeString.split(':')
    const hour = parseInt(hours)
    const ampm = hour >= 12 ? 'PM' : 'AM'
    const displayHour = hour % 12 || 12
    return `${displayHour}:${minutes} ${ampm}`
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <>
      <Head>
        <title>Admin Dashboard - JMA Field Trip System</title>
        <meta name="description" content="Administrative dashboard for field trip approvals" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <Link href="/" className="text-gray-400 hover:text-gray-600">
                  <ArrowLeft className="w-5 h-5" />
                </Link>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">Admin Dashboard</h1>
                  <p className="text-sm text-gray-500">Manage field trip requests and approvals</p>
                </div>
              </div>
              <div className="flex items-center space-x-4">
                <select
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                  className="form-select text-sm"
                >
                  <option value="all">All Requests</option>
                  <option value="pending">Pending</option>
                  <option value="in-progress">In Progress</option>
                  <option value="approved">Approved</option>
                  <option value="denied">Denied</option>
                </select>
              </div>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Stats Overview */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <Clock className="w-5 h-5 text-yellow-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Pending</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {requests.filter(r => r.status === 'pending').length}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                  <AlertCircle className="w-5 h-5 text-blue-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">In Progress</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {requests.filter(r => r.status === 'in-progress').length}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                  <CheckCircle className="w-5 h-5 text-green-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Approved</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {requests.filter(r => r.status === 'approved').length}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                  <XCircle className="w-5 h-5 text-red-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Denied</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {requests.filter(r => r.status === 'denied').length}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Requests List */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Field Trip Requests</h2>
            </div>
            
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Teacher
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Destination
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Date
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Students
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Current Stage
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredRequests.map((request) => (
                    <tr key={request.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{request.teacherName}</div>
                          <div className="text-sm text-gray-500">{request.teacherEmail}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-900 max-w-xs truncate">{request.destination}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{formatDate(request.departureDate)}</div>
                        <div className="text-sm text-gray-500">{formatTime(request.departureTime)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{request.studentCount} students</div>
                        <div className="text-sm text-gray-500">{request.gradeLevel} Grade</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(request.status)}`}>
                          {request.status.charAt(0).toUpperCase() + request.status.slice(1)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {request.currentStage === 'completed' ? 'Completed' : 
                         request.currentStage === 'denied' ? 'Denied' :
                         request.currentStage.split('-').map(word => 
                           word.charAt(0).toUpperCase() + word.slice(1)
                         ).join(' ')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => setSelectedRequest(request)}
                          className="text-blue-600 hover:text-blue-900 mr-3"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        {request.status !== 'approved' && request.status !== 'denied' && (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleApproval(request.id, request.currentStage, 'approved')}
                              className="text-green-600 hover:text-green-900"
                            >
                              <CheckCircle className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => handleApproval(request.id, request.currentStage, 'denied')}
                              className="text-red-600 hover:text-red-900"
                            >
                              <XCircle className="w-4 h-4" />
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </main>

        {/* Request Detail Modal */}
        {selectedRequest && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-lg font-semibold text-gray-900">Request Details</h3>
                <button
                  onClick={() => setSelectedRequest(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XCircle className="w-6 h-6" />
                </button>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6">
                {/* Request Information */}
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Trip Information</h4>
                    <div className="bg-gray-50 rounded-lg p-4 space-y-2">
                      <p><span className="font-medium">Teacher:</span> {selectedRequest.teacherName}</p>
                      <p><span className="font-medium">Destination:</span> {selectedRequest.destination}</p>
                      <p><span className="font-medium">Purpose:</span> {selectedRequest.purpose}</p>
                      <p><span className="font-medium">Date:</span> {formatDate(selectedRequest.departureDate)}</p>
                      <p><span className="font-medium">Time:</span> {formatTime(selectedRequest.departureTime)} - {formatTime(selectedRequest.returnTime)}</p>
                      <p><span className="font-medium">Students:</span> {selectedRequest.studentCount} ({selectedRequest.gradeLevel} Grade)</p>
                      <p><span className="font-medium">Chaperones:</span> {selectedRequest.chaperoneCount}</p>
                      <p><span className="font-medium">Cost:</span> ${selectedRequest.estimatedCost} per student</p>
                    </div>
                  </div>
                </div>

                {/* Approval Progress */}
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Approval Progress</h4>
                    <div className="space-y-3">
                      {Object.entries(selectedRequest.approvals).map(([stage, approval]) => (
                        <div key={stage} className="flex items-center justify-between p-3 border rounded-lg">
                          <div>
                            <p className="font-medium text-sm text-gray-900">
                              {stage.split('-').map(word => 
                                word.charAt(0).toUpperCase() + word.slice(1)
                              ).join(' ')}
                            </p>
                            {approval.approver && (
                              <p className="text-xs text-gray-500">by {approval.approver}</p>
                            )}
                          </div>
                          <div className="flex items-center space-x-2">
                            {approval.status === 'approved' && (
                              <CheckCircle className="w-5 h-5 text-green-600" />
                            )}
                            {approval.status === 'denied' && (
                              <XCircle className="w-5 h-5 text-red-600" />
                            )}
                            {approval.status === 'pending' && (
                              <Clock className="w-5 h-5 text-yellow-600" />
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  onClick={() => setSelectedRequest(null)}
                  className="btn btn-secondary"
                >
                  Close
                </button>
                {selectedRequest.status !== 'approved' && selectedRequest.status !== 'denied' && (
                  <>
                    <button
                      onClick={() => {
                        handleApproval(selectedRequest.id, selectedRequest.currentStage, 'denied')
                        setSelectedRequest(null)
                      }}
                      className="btn btn-danger"
                    >
                      Deny Request
                    </button>
                    <button
                      onClick={() => {
                        handleApproval(selectedRequest.id, selectedRequest.currentStage, 'approved')
                        setSelectedRequest(null)
                      }}
                      className="btn btn-success"
                    >
                      Approve Request
                    </button>
                  </>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  )
}
